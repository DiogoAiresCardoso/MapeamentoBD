unit Service.Connection;

interface

uses FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.UI.Intf,
  FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Phys, FireDAC.VCLUI.Wait,
  Data.DB, FireDAC.Comp.Client, FireDAC.Comp.DataSet, SysUtils;

type
  TBancoDados = (bdFirebird, bdMySQL);

  TServiceConnection = class
  private
    FFDConnection: TFDConnection;
    FTipoBD: TBancoDados;
    FSenha: String;
    FDatabase: String;
    FHost: String;
    FUsuario: String;
    FPorta: Integer;
    procedure SetDatabase(const Value: String);
    procedure SetHost(const Value: String);
    procedure SetPorta(const Value: Integer);
    procedure SetSenha(const Value: String);
    procedure SetTipoBD(const Value: TBancoDados);
    procedure SetUsuario(const Value: String);
    { private declarations }
  protected
    { protected declarations }
    procedure Conexao;
  public
    { public declarations }
    constructor Create;
    destructor Destroy; override;
  published
    { published declarations }
    property FDConnection: TFDConnection read FFDConnection;

    property Host: String read FHost write SetHost;
    property Porta: Integer read FPorta write SetPorta;
    property TipoBD: TBancoDados read FTipoBD write SetTipoBD;
    property Database: String read FDatabase write SetDatabase;
    property Usuario: String read FUsuario write SetUsuario;
    property Senha: String read FSenha write SetSenha;


  end;

implementation

{ TServiceConnection }

procedure TServiceConnection.Conexao;
begin

end;

constructor TServiceConnection.Create;
begin
  inherited Create;
  FFDConnection := TFDConnection.Create(nil);
end;

destructor TServiceConnection.Destroy;
begin
  FFDConnection.Close;
  FreeAndNil(FFDConnection);
  inherited Destroy;
end;


end.
