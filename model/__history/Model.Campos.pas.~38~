unit Model.Campos;

interface

uses Data.DB, Generics.Collections, FireDAC.Stan.Intf;

type
  TCampos = class
  private
    FNome: string;
    FTipoUnit: String;
    FTipo: TFDDataType;
    procedure SetTipo(const Value: TFDDataType);
    { private declarations }
  protected
    { protected declarations }
  public
    { public declarations }
    property Nome: string     read FNome write FNome;
    property Tipo: TFDDataType read FTipo write SetTipo;
    property TipoUnit: String read FTipoUnit write FTipoUnit;
  end;


  TModelCampos = class
  private
    FListaCampos: TList<TCampos>;
    { private declarations }
  protected
    { protected declarations }
  public
    { public declarations }
    constructor Create;
    destructor Destroy; override;

    property ListaCampos: TList<TCampos> read FListaCampos;
  end;

implementation


{ TModelCampos }

constructor TModelCampos.Create;
begin
  inherited Create;
  FListaCampos := TList<TCampos>.Create;
end;

destructor TModelCampos.Destroy;
begin
  FListaCampos.Free;
  inherited Destroy;
end;

{ TCampos }

procedure TCampos.SetTipo(const Value: TFDDataType);
begin
  case Value of
    dtUnknown: ;
    dtBoolean: FTipoUnit := 'Boolean';
    dtSByte, dtInt16, dtInt32, dtInt64,                     // signed int
    dtByte, dtUInt16, dtUInt32, dtUInt64: FTipoUnit := 'Integer';                   // unsinged int
    dtSingle, dtDouble, dtExtended,                         // float point numbers
    dtCurrency, dtBCD, dtFmtBCD: FTipoUnit := 'Double';                            // high-precision numbers
    dtDateTime, dtTime, dtDate, dtDateTimeStamp,            // date and time
    dtTimeIntervalFull, dtTimeIntervalYM, dtTimeIntervalDS: FTipoUnit := 'TDateTime'; // time interval
    dtAnsiString, dtWideString, dtByteString,               // string
    dtBlob, dtMemo, dtWideMemo, dtXML,                      // value blobs
    dtHBlob, dtHMemo, dtWideHMemo: FTipoUnit := 'String';                          // handle blobs
    dtHBFile: ;                                               // external files
    dtRowSetRef, dtCursorRef, dtRowRef,
    dtArrayRef, dtParentRowRef,                           // adt -> ftDataSet, ftCursor, ftADT, ftArray
    dtGUID, dtObject: ;
  end;



//  case Value of
//    ftUnknown, ftString, ftWord, ftFixedChar, ftWideString, ftFixedWideChar,
//    ftLongWord: FTipoUnit := 'String';
//    ftSmallint, ftLargeint, ftShortint, ftInteger: FTipoUnit := 'Integer';
//    ftBoolean: FTipoUnit := 'Boolean';
//    ftFloat, ftCurrency, ftBCD, ftFMTBcd, ftExtended: FTipoUnit := 'Double';
//    ftDate, ftTime, ftDateTime, ftTimeStamp, ftOraTimeStamp: FTipoUnit := 'TDateTime';
//    ftBlob, ftMemo, ftFmtMemo, ftOraClob, ftOraBlob, ftWideMemo: FTipoUnit := 'String';
//  end;
end;

end.
